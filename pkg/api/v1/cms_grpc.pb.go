// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmsServiceClient is the client API for CmsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmsServiceClient interface {
	// StartLocalPage starts a Page on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the cms/config.yaml
	//   3. all bytes constituting the Page YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalPage(ctx context.Context, opts ...grpc.CallOption) (CmsService_StartLocalPageClient, error)
	// StartFromPreviousPage starts a new Page based on a previous one.
	// If the previous Page does not have the can-replay condition set this call will result in an error.
	StartFromPreviousPage(ctx context.Context, in *StartFromPreviousPageRequest, opts ...grpc.CallOption) (*StartPageResponse, error)
	// StartPageRequest starts a new Page based on its specification.
	StartPage(ctx context.Context, in *StartPageRequest, opts ...grpc.CallOption) (*StartPageResponse, error)
	// Searches for Page(s) known to this instance
	ListPages(ctx context.Context, in *ListPagesRequest, opts ...grpc.CallOption) (*ListPagesResponse, error)
	// Subscribe listens to new Page(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (CmsService_SubscribeClient, error)
	// GetPage retrieves details of a single Page
	GetPage(ctx context.Context, in *GetPageRequest, opts ...grpc.CallOption) (*GetPageResponse, error)
	// Listen listens to Page updates and log output of a running Page
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (CmsService_ListenClient, error)
	// StopPage stops a currently running Page
	StopPage(ctx context.Context, in *StopPageRequest, opts ...grpc.CallOption) (*StopPageResponse, error)
}

type cmsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCmsServiceClient(cc grpc.ClientConnInterface) CmsServiceClient {
	return &cmsServiceClient{cc}
}

func (c *cmsServiceClient) StartLocalPage(ctx context.Context, opts ...grpc.CallOption) (CmsService_StartLocalPageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CmsService_ServiceDesc.Streams[0], "/v1.CmsService/StartLocalPage", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmsServiceStartLocalPageClient{stream}
	return x, nil
}

type CmsService_StartLocalPageClient interface {
	Send(*StartLocalPageRequest) error
	CloseAndRecv() (*StartPageResponse, error)
	grpc.ClientStream
}

type cmsServiceStartLocalPageClient struct {
	grpc.ClientStream
}

func (x *cmsServiceStartLocalPageClient) Send(m *StartLocalPageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cmsServiceStartLocalPageClient) CloseAndRecv() (*StartPageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartPageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cmsServiceClient) StartFromPreviousPage(ctx context.Context, in *StartFromPreviousPageRequest, opts ...grpc.CallOption) (*StartPageResponse, error) {
	out := new(StartPageResponse)
	err := c.cc.Invoke(ctx, "/v1.CmsService/StartFromPreviousPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsServiceClient) StartPage(ctx context.Context, in *StartPageRequest, opts ...grpc.CallOption) (*StartPageResponse, error) {
	out := new(StartPageResponse)
	err := c.cc.Invoke(ctx, "/v1.CmsService/StartPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsServiceClient) ListPages(ctx context.Context, in *ListPagesRequest, opts ...grpc.CallOption) (*ListPagesResponse, error) {
	out := new(ListPagesResponse)
	err := c.cc.Invoke(ctx, "/v1.CmsService/ListPages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (CmsService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CmsService_ServiceDesc.Streams[1], "/v1.CmsService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmsServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CmsService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type cmsServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *cmsServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cmsServiceClient) GetPage(ctx context.Context, in *GetPageRequest, opts ...grpc.CallOption) (*GetPageResponse, error) {
	out := new(GetPageResponse)
	err := c.cc.Invoke(ctx, "/v1.CmsService/GetPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (CmsService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &CmsService_ServiceDesc.Streams[2], "/v1.CmsService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmsServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CmsService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type cmsServiceListenClient struct {
	grpc.ClientStream
}

func (x *cmsServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cmsServiceClient) StopPage(ctx context.Context, in *StopPageRequest, opts ...grpc.CallOption) (*StopPageResponse, error) {
	out := new(StopPageResponse)
	err := c.cc.Invoke(ctx, "/v1.CmsService/StopPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmsServiceServer is the server API for CmsService service.
// All implementations must embed UnimplementedCmsServiceServer
// for forward compatibility
type CmsServiceServer interface {
	// StartLocalPage starts a Page on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the cms/config.yaml
	//   3. all bytes constituting the Page YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalPage(CmsService_StartLocalPageServer) error
	// StartFromPreviousPage starts a new Page based on a previous one.
	// If the previous Page does not have the can-replay condition set this call will result in an error.
	StartFromPreviousPage(context.Context, *StartFromPreviousPageRequest) (*StartPageResponse, error)
	// StartPageRequest starts a new Page based on its specification.
	StartPage(context.Context, *StartPageRequest) (*StartPageResponse, error)
	// Searches for Page(s) known to this instance
	ListPages(context.Context, *ListPagesRequest) (*ListPagesResponse, error)
	// Subscribe listens to new Page(s) updates
	Subscribe(*SubscribeRequest, CmsService_SubscribeServer) error
	// GetPage retrieves details of a single Page
	GetPage(context.Context, *GetPageRequest) (*GetPageResponse, error)
	// Listen listens to Page updates and log output of a running Page
	Listen(*ListenRequest, CmsService_ListenServer) error
	// StopPage stops a currently running Page
	StopPage(context.Context, *StopPageRequest) (*StopPageResponse, error)
	mustEmbedUnimplementedCmsServiceServer()
}

// UnimplementedCmsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCmsServiceServer struct {
}

func (UnimplementedCmsServiceServer) StartLocalPage(CmsService_StartLocalPageServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalPage not implemented")
}
func (UnimplementedCmsServiceServer) StartFromPreviousPage(context.Context, *StartFromPreviousPageRequest) (*StartPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousPage not implemented")
}
func (UnimplementedCmsServiceServer) StartPage(context.Context, *StartPageRequest) (*StartPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPage not implemented")
}
func (UnimplementedCmsServiceServer) ListPages(context.Context, *ListPagesRequest) (*ListPagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPages not implemented")
}
func (UnimplementedCmsServiceServer) Subscribe(*SubscribeRequest, CmsService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedCmsServiceServer) GetPage(context.Context, *GetPageRequest) (*GetPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (UnimplementedCmsServiceServer) Listen(*ListenRequest, CmsService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedCmsServiceServer) StopPage(context.Context, *StopPageRequest) (*StopPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPage not implemented")
}
func (UnimplementedCmsServiceServer) mustEmbedUnimplementedCmsServiceServer() {}

// UnsafeCmsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmsServiceServer will
// result in compilation errors.
type UnsafeCmsServiceServer interface {
	mustEmbedUnimplementedCmsServiceServer()
}

func RegisterCmsServiceServer(s grpc.ServiceRegistrar, srv CmsServiceServer) {
	s.RegisterService(&CmsService_ServiceDesc, srv)
}

func _CmsService_StartLocalPage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CmsServiceServer).StartLocalPage(&cmsServiceStartLocalPageServer{stream})
}

type CmsService_StartLocalPageServer interface {
	SendAndClose(*StartPageResponse) error
	Recv() (*StartLocalPageRequest, error)
	grpc.ServerStream
}

type cmsServiceStartLocalPageServer struct {
	grpc.ServerStream
}

func (x *cmsServiceStartLocalPageServer) SendAndClose(m *StartPageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cmsServiceStartLocalPageServer) Recv() (*StartLocalPageRequest, error) {
	m := new(StartLocalPageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CmsService_StartFromPreviousPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServiceServer).StartFromPreviousPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CmsService/StartFromPreviousPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServiceServer).StartFromPreviousPage(ctx, req.(*StartFromPreviousPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsService_StartPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServiceServer).StartPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CmsService/StartPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServiceServer).StartPage(ctx, req.(*StartPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsService_ListPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServiceServer).ListPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CmsService/ListPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServiceServer).ListPages(ctx, req.(*ListPagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmsServiceServer).Subscribe(m, &cmsServiceSubscribeServer{stream})
}

type CmsService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type cmsServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *cmsServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CmsService_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServiceServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CmsService/GetPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServiceServer).GetPage(ctx, req.(*GetPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmsServiceServer).Listen(m, &cmsServiceListenServer{stream})
}

type CmsService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type cmsServiceListenServer struct {
	grpc.ServerStream
}

func (x *cmsServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CmsService_StopPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServiceServer).StopPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.CmsService/StopPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServiceServer).StopPage(ctx, req.(*StopPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CmsService_ServiceDesc is the grpc.ServiceDesc for CmsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CmsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.CmsService",
	HandlerType: (*CmsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousPage",
			Handler:    _CmsService_StartFromPreviousPage_Handler,
		},
		{
			MethodName: "StartPage",
			Handler:    _CmsService_StartPage_Handler,
		},
		{
			MethodName: "ListPages",
			Handler:    _CmsService_ListPages_Handler,
		},
		{
			MethodName: "GetPage",
			Handler:    _CmsService_GetPage_Handler,
		},
		{
			MethodName: "StopPage",
			Handler:    _CmsService_StopPage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalPage",
			Handler:       _CmsService_StartLocalPage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _CmsService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _CmsService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cms.proto",
}
